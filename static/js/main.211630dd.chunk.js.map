{"version":3,"sources":["components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","props","handleModal","flag","setState","modalOpen","componentDidMount","axios","get","then","response","states","state","data","temp","city","districtData","push","city_name","active","confirmed","deceased","delta","migratedother","notes","recovered","state_name","splice","metaData","console","log","catch","err","currCity","Fragment","className","style","margin","boxShadow","this","map","item","Accordion","AccordionSummary","expandIcon","id","Typography","AccordionDetails","display","flexWrap","justifyContent","cities","Chip","onClick","label","variant","color","Modal","open","onClose","Box","sx","position","top","left","transform","width","bgcolor","borderRadius","p","mt","flexDirection","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.211630dd.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n// import Tabs from '@material-ui/core/Tabs';\r\n// import Tab from '@material-ui/core/Tab';\r\n// import { TabPanel } from './TabPanel';\r\nimport Typography from '@mui/material/Typography';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport Chip from '@mui/material/Chip';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Modal from '@mui/material/Modal';\r\n\r\nexport default class Dashboard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metaData: [],\r\n            modalOpen: false,\r\n            currCity: []\r\n        }\r\n\r\n    }\r\n\r\n    handleModal = (flag) => {\r\n        this.setState({ modalOpen: flag });\r\n    }\r\n    componentDidMount = () => {\r\n        axios\r\n            .get(\r\n                `https://data.covid19india.org/state_district_wise.json`\r\n            )\r\n            .then((response) => {\r\n\r\n                let states = [];\r\n                // let result = [response.data].map(Object.values)\r\n                // console.log(result)\r\n                for (const state in response.data) {\r\n                    // console.log(`${state}: ${response.data[state]}`);\r\n\r\n                    let temp = [];\r\n                    for (const city in response.data[state].districtData) {\r\n                        temp.push({\r\n                            city_name: city,\r\n                            active: response.data[state].districtData[city].active,\r\n                            confirmed: response.data[state].districtData[city].confirmed,\r\n                            deceased: response.data[state].districtData[city].deceased,\r\n                            delta: response.data[state].districtData[city].delta,\r\n                            migratedother: response.data[state].districtData[city].migratedother,\r\n                            notes: response.data[state].districtData[city].notes,\r\n                            recovered: response.data[state].districtData[city].recovered,\r\n                        })\r\n                    }\r\n                    states.push({\r\n                        state_name: state,\r\n                        districtData: temp\r\n                    })\r\n\r\n                }\r\n                states.splice(0, 1)\r\n                this.setState({ metaData: states });\r\n                console.log(states)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* <div style={{ display: 'flex' }}> */}\r\n                    <div className=\"navbar\">\r\n                        {/* <img src={Syringe} /> */}\r\n                        <h1 className=\"heading\">\r\n                            COVID-19 DASHBOARD\r\n                        </h1>\r\n                    </div>\r\n                    <div style={{\r\n                        margin: '3em 5em 1em 5em',\r\n                        boxShadow: '0 8px 16px 0 rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        {this.state.metaData.map((item) => (\r\n                            <Accordion>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1a-content\"\r\n                                    id=\"panel1a-header\"\r\n                                >\r\n                                    <Typography  > <div className=\"typo-pills\">\r\n                                        {/* <Chip label={item.vaccine} color=\"primary\" />\r\n                                {item.available_capacity_dose1 > 0 && <Chip variant=\"outlined\" label={\"DOSE-I\"} color=\"success\" />}\r\n                                {item.available_capacity_dose2 > 0 && <Chip variant=\"outlined\" label={\"DOSE-II\"} color=\"success\" />}\r\n                                <Chip variant=\"outlined\" label={`AGE-${item.min_age_limit}+`} color=\"primary\" /> */}\r\n                                    </div>\r\n                                        {item.state_name}\r\n\r\n\r\n                                    </Typography>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>\r\n                                        {item.districtData.map((cities) => (\r\n                                            // <Button > \r\n                                            <Chip onClick={() => { this.setState({ currCity: cities }); this.handleModal(true) }} style={{ margin: '0.5rem' }} label={cities.city_name} variant=\"outlined\" color=\"success\" />\r\n                                            // </Button>\r\n\r\n                                            //             {cities.city_name}\r\n\r\n\r\n\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                        }\r\n\r\n                        <Modal\r\n                            open={this.state.modalOpen}\r\n                            onClose={() => this.handleModal(false)}\r\n                            aria-labelledby=\"modal-modal-title\"\r\n                            aria-describedby=\"modal-modal-description\"\r\n                        >\r\n                            <Box sx={{\r\n                                position: 'absolute',\r\n                                top: '50%',\r\n                                left: '50%',\r\n                                transform: 'translate(-50%, -50%)',\r\n                                width: 400,\r\n                                bgcolor: 'background.paper',\r\n                                // border: '2px solid #000',\r\n                                boxShadow: 24,\r\n                                borderRadius: '10px',\r\n                                p: 4,\r\n                            }}>\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                    <h1>   {this.state.currCity.city_name}</h1>\r\n                                </div>\r\n\r\n\r\n                                <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                        <Chip style={{ margin: '0.5rem' }} label={`Active Cases : ${this.state.currCity.active}`} variant=\"outlined\" color=\"primary\" />\r\n                                        <Chip style={{ margin: '0.5rem' }} label={`Confirmed Cases: ${this.state.currCity.confirmed}`} variant=\"outlined\" />\r\n                                        <Chip style={{ margin: '0.5rem' }} label={`Deceased : ${this.state.currCity.deceased}`} />\r\n                                        <Chip style={{ margin: '0.5rem' }} label={`Migrated : ${this.state.currCity.migratedother}`} variant=\"outlined\" />\r\n                                        <Chip style={{ margin: '0.5rem' }} label={`Recovered : ${this.state.currCity.recovered}`} color=\"success\" />\r\n                                    </div>\r\n\r\n                                </Typography>\r\n                            </Box>\r\n                        </Modal>\r\n                    </div>\r\n                {/* </div > */}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport  Dashboard  from './components/Dashboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Dashboard />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}